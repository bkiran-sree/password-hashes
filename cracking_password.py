# -*- coding: utf-8 -*-
"""Cracking_Password.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13v16epJZYh1tmPXSax9-iNGBnhCp5E5W

# Cracking Passwords with Hashes
Cracking password hashes using **dictionary attack** and **brute force attack** in Python.

### Project Overview
- Understand password hashing
- Generate sample hashes
- Crack hashes using dictionary and brute-force methods
- Use a wordlist uploaded by user

---

## Step 1: Import libraries and define hash function
We will use Python's built-in `hashlib` for hashing and `itertools` for brute forcing.
"""

import hashlib
import itertools
import string

def md5_hash(password):
    return hashlib.md5(password.encode()).hexdigest()

"""## Step 2: Create sample passwords and their hashes
These will be the target hashes we try to crack.

"""

passwords = ["password123", "hello", "admin", "letmein"]
hashes = [md5_hash(p) for p in passwords]

print("Sample hashes:")
for p, h in zip(passwords, hashes):
    print(f"'{p}' -> {h}")

"""## Step 3: Upload a wordlist file
Use the file upload dialog to upload a wordlist such as a small subset of `rockyou.txt`.

"""

from google.colab import files
uploaded = files.upload()  # Upload your wordlist file here

"""## Step 4: Dictionary attack function
This function tries to find the password from the wordlist matching the hash.

"""

def crack_md5_dictionary(hash_to_crack, wordlist_file):
    with open(wordlist_file, 'r', encoding='utf-8', errors='ignore') as file:
        for line in file:
            word = line.strip()
            if md5_hash(word) == hash_to_crack:
                return f"Password found: {word}"
    return "Password not found in the wordlist."

"""## Step 5: Test dictionary attack on one of the sample hashes
Make sure to replace `'rockyou.txt'` with the actual filename of your uploaded wordlist.

"""

# Replace this with your uploaded wordlist filename
wordlist_filename = list(uploaded.keys())[0]  # Automatically get uploaded filename

hash_to_crack = hashes[0]  # hash for "password123"

result = crack_md5_dictionary(hash_to_crack, wordlist_filename)
print(result)

"""## Step 6: Brute force attack function
Note: Brute force is slow and limited to short passwords in this demo.

"""

def brute_force_md5(hash_to_crack, max_length=4):
    chars = string.ascii_lowercase + string.digits
    for length in range(1, max_length + 1):
        for attempt in itertools.product(chars, repeat=length):
            attempt_str = ''.join(attempt)
            if md5_hash(attempt_str) == hash_to_crack:
                return f"Password found: {attempt_str}"
    return "Password not found with brute-force."

"""## Step 7: Test brute force attack
Try brute forcing a simple short password hash.

"""

simple_hash = md5_hash("abc")
print(f"Trying brute force on hash: {simple_hash}")
result = brute_force_md5(simple_hash, max_length=3)
print(result)

"""## Step 8: Optional - Test cracking multiple hashes using dictionary attack
This runs dictionary attack on all sample hashes.

"""

def test_multiple_hashes(passwords, wordlist_file):
    for pwd in passwords:
        h = md5_hash(pwd)
        print(f"\nCracking hash for password '{pwd}': {h}")
        result = crack_md5_dictionary(h, wordlist_file)
        print(result)

test_multiple_hashes(passwords, wordlist_filename)